#include <pthread.h>


int pthread_create(pthread_t *restrict tidp, const pthread_attr_t *restrict attr, void *(*start_rtn)(void *), void *restrict arg);
Returns: 0 if OK, error number on failure

Thread call pthread_exit, return hoặc bị cancel bởi 1 thread khác.
void pthread_exit(void *rval_ptr)
1 thread khác phải clear resource của thread đã exit
int pthread_cancel(pthread_t tid);
int pthread_join(pthread_t thread, void **rval_ptr)
Block cho đến khi thread cần đợi kết thúc
Return EINVAL nếu thread kia đã kết thúc từ trước

------>>>> MUTEX:
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr)
int pthread_mutex_destroy(pthread_mutex_t *mutex)
int pthread_mutex_lock(pthread_mutex_t *mutex)
int pthread_mutex_unlock(pthread_mutex_t *mutex)
int pthread_mutex_trylock(pthread_mutex_t *mutex);

------>>>> SEMAPHORE:
sem_t sem_name;
int sem_init(sem_t *sem, int pshared, unsigned int value);
int sem_wait(sem_t *sem);
int sem_post(sem_t *sem);
int sem_destroy(sem_t *sem);

gcc CountUp.c -o Count -lpthread


