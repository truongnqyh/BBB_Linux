int misc_open(struct inode *node, struct file *filep);
int misc_release(struct inode *node, struct file *filep);
static ssize_t misc_read(struct file *filp, char __user *buf, size_t count,
                         loff_t *f_pos);
static void timer_function(struct timer_list *t);
static ssize_t misc_write(struct file *filp, const char __user *buf,
                          size_t count, loff_t *f_pos);
#define MAGIC_NO	100
#define SEND_DATA_CMD	_IOW(MAGIC_NO, sizeof(struct config), struct config *) //=> unsigned int
#define GET_DATA_CMD	_IOR(MAGIC_NO, sizeof(struct config), struct config *)
static long misc_ioctl(struct file *filep, unsigned int cmd, unsigned long arg);

struct file_operations misc_fops = {
    .owner = THIS_MODULE,
    .open = misc_open, //Enable hardware
    .release = misc_release, //disable hardware, synchronize data xuong hardware
    .read = misc_read, //Doc du lieu tu hardware, luu vao buffer cua kernel
    .write = misc_write, //Ghi du lieu tu buffer cua kernel xuong hardware
    .unlocked_ioctl = misc_ioctl, //Chua cau hinh ve thoi gian sang cua den
};

static struct miscdevice misc_example = {
    .minor = MISC_DYNAMIC_MINOR,
    .name = "misc_example",
    .fops = &misc_fops,
};

static int misc_init(void)
{
    pr_info("misc module init\n");
    base_addr = ioremap(GPIO_ADDR_BASE, ADDR_SIZE);
    misc_register(&misc_example);

    return 0;
}

static void misc_exit(void)
{
    pr_info("misc module exit\n");
    misc_deregister(&misc_example);
}

module_init(misc_init);
module_exit(misc_exit);